<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ManagedBass</name>
    </assembly>
    <members>
        <member name="T:ManagedBass.Fx.AutoWahEffect">
            <summary>
            BassFx AutoWah Effect.
            </summary>
            <remarks>
            <para>The effect implements the auto-wah by using 4-stage phaser effect which moves a peak in the frequency response up and down the frequency spectrum by amplitude of Input signal.</para>
            <para>
            The <see cref="P:ManagedBass.Fx.AutoWahEffect.DryMix"/> is the volume of Input signal and the <see cref="P:ManagedBass.Fx.AutoWahEffect.WetMix"/> is the volume of delayed signal.
            The <see cref="P:ManagedBass.Fx.AutoWahEffect.Feedback"/> sets feedback of auto wah (phaser).
            The <see cref="P:ManagedBass.Fx.AutoWahEffect.Rate"/> and <see cref="P:ManagedBass.Fx.AutoWahEffect.Range"/> control how fast and far the frequency notches move.
            The <see cref="P:ManagedBass.Fx.AutoWahEffect.Rate"/> is the rate of sweep in cycles per second, <see cref="P:ManagedBass.Fx.AutoWahEffect.Range"/> is the width of sweep in octaves.
            And the the <see cref="P:ManagedBass.Fx.AutoWahEffect.Frequency"/> is the base frequency of sweep.
            </para>
            </remarks>
        </member>
        <member name="M:ManagedBass.Fx.AutoWahEffect.Slow">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.AutoWahEffect.Fast">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.AutoWahEffect.HiFast">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.AutoWahEffect.DryMix">
            <summary>
            Dry (unaffected) signal mix (-2...+2). Default = 0.5.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.AutoWahEffect.Feedback">
            <summary>
            Feedback (-1...+1). Default = 0.5.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.AutoWahEffect.Frequency">
            <summary>
            Base frequency of sweep range (0&lt;...1000). Default = 50.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.AutoWahEffect.Range">
            <summary>
            Sweep range in octaves (0&lt;...&lt;10). Default = 4.3.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.AutoWahEffect.Rate">
            <summary>
            Rate of sweep in cycles per second (0&lt;...&lt;10). Default = 2.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.AutoWahEffect.WetMix">
            <summary>
            Wet (affected) signal mix (-2...+2). Default = 1.5.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.AutoWahEffect.Channels">
            <summary>
            A <see cref="T:ManagedBass.FXChannelFlags" /> flag to define on which channels to apply the effect. Default: <see cref="F:ManagedBass.FXChannelFlags.All"/>
            </summary>
        </member>
        <member name="T:ManagedBass.Fx.BQFEffect">
            <summary>
            BassFx BiQuad Filter Effect.
            </summary>
            <remarks>
            BiQuad filters are second-order recursive linear filters.
            </remarks>
        </member>
        <member name="P:ManagedBass.Fx.BQFEffect.Gain">
            <summary>
            Gain in dB (-15...0...+15). Default 0dB (used only for PEAKINGEQ and Shelving filters).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.BQFEffect.EffectType">
            <summary>
            BQF Effect Kind.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.BQFEffect.Bandwidth">
            <summary>
            Bandwidth in octaves (0.1...4...n), Q is not in use (<see cref="P:ManagedBass.Fx.BQFEffect.Bandwidth"/> has priority over <see cref="P:ManagedBass.Fx.BQFEffect.Q"/>). Default = 1 (0=not in use).
            The bandwidth in octaves (between -3 dB frequencies for <see cref="F:ManagedBass.Fx.BQFType.BandPass"/> and <see cref="F:ManagedBass.Fx.BQFType.Notch"/> or between midpoint (dBgain/2) gain frequencies for PEAKINGEQ).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.BQFEffect.Center">
            <summary>
            Cut-off frequency (Center in PEAKINGEQ and Shelving filters) in Hz (1...info.freq/2). Default = 200Hz.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.BQFEffect.Q">
            <summary>
            EE kinda definition of Q (0.1...1...n), if <see cref="P:ManagedBass.Fx.BQFEffect.Bandwidth"/> is not in use. Default = 0.0 (0=not in use).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.BQFEffect.S">
            <summary>
            A shelf slope parameter (linear, used only with Shelving filters) (0...1...n). Default = 0.0.
            When 1, the shelf slope is as steep as you can get it and remain monotonically increasing or decreasing gain with frequency.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.BQFEffect.Channels">
            <summary>
            A <see cref="T:ManagedBass.FXChannelFlags" /> flag to define on which channels to apply the effect. Default: <see cref="F:ManagedBass.FXChannelFlags.All"/>
            </summary>
        </member>
        <member name="T:ManagedBass.Fx.ChorusEffect">
            <summary>
            BassFx Chorus Effect.
            </summary>
            <remarks>
            <para>
            True vintage chorus works the same way as flanging. 
            It mixes a varying delayed signal with the original to produce a large number of harmonically related notches in the frequency response. 
            Chorus uses a longer delay than flanging, so there is a perception of "spaciousness", although the delay is too short to hear as a distinct slap-back echo. 
            There is also little or no feedback, so the effect is more subtle.
            </para>
            <para>
            The <see cref="P:ManagedBass.Fx.ChorusEffect.DryMix"/> is the volume of Input signal and the <see cref="P:ManagedBass.Fx.ChorusEffect.WetMix"/> is the volume of delayed signal. 
            The <see cref="P:ManagedBass.Fx.ChorusEffect.Feedback"/> sets feedback of chorus. 
            The <see cref="P:ManagedBass.Fx.ChorusEffect.Rate"/>, <see cref="P:ManagedBass.Fx.ChorusEffect.MinSweep"/> and <see cref="P:ManagedBass.Fx.ChorusEffect.MaxSweep"/> control how fast and far the frequency notches move. 
            The <see cref="P:ManagedBass.Fx.ChorusEffect.Rate"/> is the rate of delay change in millisecs per sec, <see cref="P:ManagedBass.Fx.ChorusEffect.MaxSweep"/>-<see cref="P:ManagedBass.Fx.ChorusEffect.MinSweep"/> is the range or width of sweep in ms.
            </para>
            </remarks>
        </member>
        <member name="M:ManagedBass.Fx.ChorusEffect.Flanger">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.ChorusEffect.Exaggerated">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.ChorusEffect.MotorCycle">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.ChorusEffect.Devil">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.ChorusEffect.ManyVoices">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.ChorusEffect.BackChipmunk">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.ChorusEffect.Water">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.ChorusEffect.Airplane">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.ChorusEffect.DryMix">
            <summary>
            Dry (unaffected) signal mix (-2...+2). Default = 0.9
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.ChorusEffect.Feedback">
            <summary>
            Feedback (-1...+1). Default = 0.5.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.ChorusEffect.MaxSweep">
            <summary>
            Maximum delay in ms (0&lt;...6000). Default = 400.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.ChorusEffect.MinSweep">
            <summary>
            Minimum delay in ms (0&lt;...6000). Default = 1.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.ChorusEffect.Rate">
            <summary>
            Rate in ms/s (0&lt;...1000). Default = 200.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.ChorusEffect.WetMix">
            <summary>
            Wet (affected) signal mix (-2...+2). Default = 0.35.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.ChorusEffect.Channels">
            <summary>
            A <see cref="T:ManagedBass.FXChannelFlags" /> flag to define on which channels to apply the effect. Default: <see cref="F:ManagedBass.FXChannelFlags.All"/>
            </summary>
        </member>
        <member name="T:ManagedBass.Fx.CompressorEffect">
            <summary>
            BassFx Compressor Effect.
            </summary>
            <remarks>
            Compressors are commonly used in recording to control the level, by making loud passages quieter, and quiet passages louder.
            This is useful in allowing a vocalist to sing quiet and loud for different emphasis, and always be heard clearly in the mix.
            Compression is generally applied to guitar to give clean sustain, where the start of a note is "squashed" with the gain automatically increased as the not fades away.
            Compressors take a short time to react to a picked note, and it can be difficult to find settings that react quickly enough to the volume change without killing the natural attack sound of your guitar.
            </remarks>
        </member>
        <member name="P:ManagedBass.Fx.CompressorEffect.Attack">
            <summary>
            Time in ms before compression reaches its full value, in the range from 0.01 to 500. Default = 20.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.CompressorEffect.Release">
            <summary>
            Time (speed) in ms at which compression is stopped after Input drops below <see cref="P:ManagedBass.Fx.CompressorEffect.Threshold"/>, in the range from 50 to 3000. Default = 200.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.CompressorEffect.Threshold">
            <summary>
            Point in dB at which compression begins, in decibels, in the range from -60 to 0. Default = -15.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.CompressorEffect.Gain">
            <summary>
            Output gain in dB of signal after compression, in the range from -60 to 60. Default = 5.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.CompressorEffect.Ratio">
            <summary>
            Compression ratio, in the range from 1 to 100. Default = 3.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.CompressorEffect.Channels">
            <summary>
            A <see cref="T:ManagedBass.FXChannelFlags" /> flag to define on which channels to apply the effect. Default: <see cref="F:ManagedBass.FXChannelFlags.All"/>
            </summary>
        </member>
        <member name="T:ManagedBass.Fx.DampEffect">
            <summary>
            BassFx Damp Effect.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.DampEffect.Gain">
            <summary>
            Amplification level (0...1...n, linear). 
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.DampEffect.Rate">
            <summary>
            Amplification adjustment rate (0...1, linear).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.DampEffect.Target">
            <summary>
            Target volume level (0&lt;...1, linear).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.DampEffect.Quiet">
            <summary>
            Quiet volume level (0...1, linear). 
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.DampEffect.Delay">
            <summary>
            Delay in seconds before increasing level (0...n, linear).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.DampEffect.Channels">
            <summary>
            A <see cref="T:ManagedBass.FXChannelFlags" /> flag to define on which channels to apply the effect. Default: <see cref="F:ManagedBass.FXChannelFlags.All"/>
            </summary>
        </member>
        <member name="T:ManagedBass.Fx.DistortionEffect">
            <summary>
            BassFx Distortion Effect.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.DistortionEffect.Hard">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.DistortionEffect.VeryHard">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.DistortionEffect.Medium">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.DistortionEffect.Soft">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.DistortionEffect.Drive">
            <summary>
            Distortion Drive (0...5).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.DistortionEffect.DryMix">
            <summary>
            Dry (unaffected) signal mix (-5...+5).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.DistortionEffect.Feedback">
            <summary>
            Feedback (-1...+1).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.DistortionEffect.Volume">
            <summary>
            Distortion volume (0...+2).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.DistortionEffect.WetMix">
            <summary>
            Wet (affected) signal mix (-5...+5).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.DistortionEffect.Channels">
            <summary>
            A <see cref="T:ManagedBass.FXChannelFlags" /> flag to define on which channels to apply the effect. Default: <see cref="F:ManagedBass.FXChannelFlags.All"/>
            </summary>
        </member>
        <member name="T:ManagedBass.Fx.EchoEffect">
            <summary>
            BassFx Echo Effect.
            </summary>
            <remarks>
            <para>
            This is an echo effect that replays what you have played one or more times after a period of time.
            It's something like the echoes you might hear shouting against a canyon wall.
            For reverb effect enable feedback.
            </para>
            <para>
            The <see cref="P:ManagedBass.Fx.EchoEffect.DryMix"/> is the volume of input signal and the <see cref="P:ManagedBass.Fx.EchoEffect.WetMix"/> is the volume of delayed signal.
            The <see cref="P:ManagedBass.Fx.EchoEffect.Delay"/> is the delay time in sec.
            The <see cref="P:ManagedBass.Fx.EchoEffect.Feedback"/> sets how much delay is feed back to the input (for repeating delays).
            If <see cref="P:ManagedBass.Fx.EchoEffect.Stereo"/> is enabled and a stream has an even number of channels then, each even channels will be echoed to each other.
            </para>
            </remarks>
        </member>
        <member name="M:ManagedBass.Fx.EchoEffect.Small">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.EchoEffect.ManyEchoes">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.EchoEffect.ReverseEchoes">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.EchoEffect.RoboticVoice">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.EchoEffect.DryMix">
            <summary>
            Dry (unaffected) signal mix (-2...+2). 
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.EchoEffect.WetMix">
            <summary>
            Wet (affected) signal mix (-2...+2). 
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.EchoEffect.Feedback">
            <summary>
            Feedback (-1...+1).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.EchoEffect.Delay">
            <summary>
            Delay in seconds (0+...6).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.EchoEffect.Stereo">
            <summary>
            Echo adjoining channels to each other? Default is disabled.
            </summary>
            <remarks>Only allowed with even number of channels!
            <para>If enabled and a stream has an even number of channels then, each even channels will be echoed to each other.</para>
            </remarks>
        </member>
        <member name="P:ManagedBass.Fx.EchoEffect.Channels">
            <summary>
            A <see cref="T:ManagedBass.FXChannelFlags" /> flag to define on which channels to apply the effect. Default: <see cref="F:ManagedBass.FXChannelFlags.All"/>
            </summary>
        </member>
        <member name="T:ManagedBass.Fx.PeakEQ">
            <summary>
            BassFx Peaking Equalizer Effect.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.PeakEQ.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Creates a new instance of <see cref="T:ManagedBass.Fx.PeakEQ"/>.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.PeakEQ.AddBand(System.Double)">
            <summary>
            Adds a Band.
            </summary>
            <param name="CenterFrequency">The Band's center frequency in Hz. Default = 1000. Max = 1/2 of SampleRate.</param>
            <returns>The Band Index to be used with <see cref="M:ManagedBass.Fx.PeakEQ.UpdateBand(System.Int32,System.Double)"/>.</returns>
        </member>
        <member name="M:ManagedBass.Fx.PeakEQ.UpdateBand(System.Int32,System.Double)">
            <summary>
            Updates a Band.
            </summary>
            <param name="Band">The Index of the Band to Update (as returned by <see cref="M:ManagedBass.Fx.PeakEQ.AddBand(System.Double)"/>).</param>
            <param name="Gain">The new Gain value for the Band (-15 ... 0 ... 15).</param>
        </member>
        <member name="M:ManagedBass.Fx.PeakEQ.Dispose">
            <summary>
            Frees all resources used by this instance.
            </summary>
        </member>
        <member name="T:ManagedBass.Fx.PhaserEffect">
            <summary>
            BassFx Phaser Effect.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.PhaserEffect.PhaseShift">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.PhaserEffect.SlowInvertPhaseShiftWithFeedback">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.PhaserEffect.BasicPhase">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.PhaserEffect.PhaseWithFeedback">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.PhaserEffect.Medium">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.PhaserEffect.Fast">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.PhaserEffect.InvertWithInvertFeedback">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.PhaserEffect.TremoloWah">
            <summary>
            Set up a Preset.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.PhaserEffect.DryMix">
            <summary>
            Dry (unaffected) signal mix (-2...+2). Default = 0.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.PhaserEffect.Feedback">
            <summary>
            Feedback (-1...+1). Default = 0.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.PhaserEffect.Frequency">
            <summary>
            Base frequency of sweep range (0&lt;...1000). Default = 0.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.PhaserEffect.Range">
            <summary>
            Sweep range inoctaves (0&lt;...&lt;10). Default = 0.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.PhaserEffect.Rate">
            <summary>
            Rate of sweep in cycles per second (0&lt;...&lt;10). Default = 0.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.PhaserEffect.WetMix">
            <summary>
            Wet (affected) signal mix (-2...+2). Default = 0.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.PhaserEffect.Channels">
            <summary>
            A <see cref="T:ManagedBass.FXChannelFlags" /> flag to define on which channels to apply the effect. Default: <see cref="F:ManagedBass.FXChannelFlags.All"/>
            </summary>
        </member>
        <member name="T:ManagedBass.Fx.PitchShiftEffect">
            <summary>
            BassFx Pitch shift Effect.
            </summary>
            <remarks>
            This effect uses FFT for its pitch shifting while maintaining duration.
            </remarks>
        </member>
        <member name="P:ManagedBass.Fx.PitchShiftEffect.PitchShift">
            <summary>
            A factor value which is between 0.5 (one octave down) and 2 (one octave up) (1 won't change the pitch, default).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.PitchShiftEffect.Semitones">
            <summary>
            Semitones (0 won't change the pitch). Default = 0.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.PitchShiftEffect.FFTFrameSize">
            <summary>
            Defines the FFT frame size used for the processing. Typical values are 1024, 2048 (default) and 4096, max is 8192.
            </summary>
            <remarks>It may be any value up to 8192 but it MUST be a power of 2.</remarks>
        </member>
        <member name="P:ManagedBass.Fx.PitchShiftEffect.OversamplingFactor">
            <summary>
            Is the STFT oversampling factor which also determines the overlap between adjacent STFT frames. Default = 8.
            </summary>
            <remarks>It should at least be 4 for moderate scaling ratios. A value of 32 is recommended for best quality (better quality = higher CPU usage).</remarks>
        </member>
        <member name="P:ManagedBass.Fx.PitchShiftEffect.Channels">
            <summary>
            A <see cref="T:ManagedBass.FXChannelFlags" /> flag to define on which channels to apply the effect. Default: <see cref="F:ManagedBass.FXChannelFlags.All"/>
            </summary>
        </member>
        <member name="T:ManagedBass.Fx.ReverbEffect">
            <summary>
            BassFx Reverb (Freeverb) Effect.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.ReverbEffect.Damp">
            <summary>
            Damping factor (0.0...1.0, def. 0.5).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.ReverbEffect.DryMix">
            <summary>
            Dry (unaffected) signal mix (0.0...1.0, def. 0).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.ReverbEffect.RoomSize">
            <summary>
            Room size (0.0...1.0, def. 0.5).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.ReverbEffect.WetMix">
            <summary>
            Wet (affected) signal mix (0.0...3.0, def. 1.0).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.ReverbEffect.Width">
            <summary>
            Stereo width (0.0...1.0, def. 1.0).
            </summary>
            <remarks>It should at least be 4 for moderate scaling ratios. A value of 32 is recommended for best quality (better quality = higher CPU usage).</remarks>
        </member>
        <member name="P:ManagedBass.Fx.ReverbEffect.Mode">
            <summary>
            Mode: 0 = no freeze or 1 = freeze, def. 0 (no freeze).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.ReverbEffect.Channels">
            <summary>
            A <see cref="T:ManagedBass.FXChannelFlags" /> flag to define on which channels to apply the effect. Default: <see cref="F:ManagedBass.FXChannelFlags.All"/>
            </summary>
        </member>
        <member name="T:ManagedBass.Fx.RotateEffect">
            <summary>
            BassFx Rotate Effect.
            </summary>
            <remarks>
            <para>This is a volume rotate effect between even channels, just like 2 channels playing ping-pong between each other.</para>
            <para>The <see cref="P:ManagedBass.Fx.RotateEffect.Rate"/> defines the speed in Hz.</para>
            </remarks>
        </member>
        <member name="P:ManagedBass.Fx.RotateEffect.Rate">
            <summary>
            Rotation rate/speed in Hz (A negative rate can be used for reverse direction).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.RotateEffect.Channels">
            <summary>
            A <see cref="T:ManagedBass.FXChannelFlags" /> flag to define on which channels to apply the effect. Default: <see cref="F:ManagedBass.FXChannelFlags.All"/>
            </summary>
        </member>
        <member name="T:ManagedBass.Fx.MediaPlayerFX">
            <summary>
            A Reusable Channel which can Load files like a Player including Tempo, Pitch and Reverse options using BassFx.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.MediaPlayerFX.Reverse">
            <summary>
            Gets or Sets the Media playback direction.
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.MediaPlayerFX.Pitch">
            <summary>
            Gets or Sets the Pitch in Semitones (-60 ... 0 ... 60).
            </summary>
        </member>
        <member name="P:ManagedBass.Fx.MediaPlayerFX.Tempo">
            <summary>
            Gets or Sets the Tempo in Percentage (-95% ... 0 ... 5000%)
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.MediaPlayerFX.OnLoad(System.String)">
            <summary>
            Loads the File Channel with FX.
            </summary>
        </member>
        <member name="M:ManagedBass.Fx.MediaPlayerFX.InitProperties">
            <summary>
            Initializes Properties on every call to <see cref="M:ManagedBass.MediaPlayer.Load(System.String)"/>.
            </summary>
        </member>
        <member name="T:ManagedBass.DirectX8.DXChorusEffect">
            <summary>
            DX8 Chorus Effect.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXChorusEffect.Waveform">
            <summary>
            Waveform of the LFO. Default = <see cref="F:ManagedBass.DXWaveform.Sine"/>.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXChorusEffect.WetDryMix">
            <summary>
            Ratio of wet (processed) signal to dry (unprocessed) signal. Must be in the range from 0 (default) through 100 (all wet).
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXChorusEffect.Depth">
            <summary>
            Percentage by which the delay time is modulated by the low-frequency oscillator, in hundredths of a percentage point. Must be in the range from 0 through 100. The default value is 25.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXChorusEffect.Feedback">
            <summary>
            Percentage of output signal to feed back into the effect's input, in the range from -99 to 99. The default value is 0.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXChorusEffect.Frequency">
            <summary>
            Frequency of the LFO, in the range from 0 to 10. The default value is 0.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXChorusEffect.Delay">
            <summary>
            Number of milliseconds the input is delayed before it is played back, in the range from 0 to 20. The default value is 0 ms.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXChorusEffect.Phase">
            <summary>
            Phase differential between left and right LFOs. Default is <see cref="F:ManagedBass.DXPhase.Zero"/>.
            </summary>
        </member>
        <member name="T:ManagedBass.DirectX8.DXDistortionEffect">
            <summary>
            DX8 Distortion Effect.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXDistortionEffect.Gain">
            <summary>
            Amount of signal change after distortion, in the range from -60 through 0. The default value is 0 dB.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXDistortionEffect.Edge">
            <summary>
            Percentage of distortion intensity, in the range in the range from 0 through 100. The default value is 50 percent.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXDistortionEffect.PostEQCenterFrequency">
            <summary>
            Center frequency of harmonic content addition, in the range from 100 through 8000. The default value is 4000 Hz.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXDistortionEffect.PostEQBandwidth">
            <summary>
            Width of frequency band that determines range of harmonic content addition, in the range from 100 through 8000. The default value is 4000 Hz.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXDistortionEffect.PreLowpassCutoff">
            <summary>
            Filter cutoff for high-frequency harmonics attenuation, in the range from 100 through 8000. The default value is 4000 Hz.
            </summary>
        </member>
        <member name="T:ManagedBass.DirectX8.DXEchoEffect">
            <summary>
            DX8 Echo Effect.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXEchoEffect.WetDryMix">
            <summary>
            Ratio of wet (processed) signal to dry (unprocessed) signal. Must be in the range from 0 (default) through 100 (all wet).
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXEchoEffect.Feedback">
            <summary>
            Percentage of output fed back into input, in the range from 0 through 100. The default value is 0.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXEchoEffect.LeftDelay">
            <summary>
            Delay for left channel, in milliseconds, in the range from 1 through 2000. The default value is 333 ms.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXEchoEffect.RightDelay">
            <summary>
            Delay for right channel, in milliseconds, in the range from 1 through 2000. The default value is 333 ms.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXEchoEffect.PanDelay">
            <summary>
            Value that specifies whether to swap left and right delays with each successive echo. The default value is <see langword="false" />, meaning no swap.
            </summary>
        </member>
        <member name="T:ManagedBass.DirectX8.DXFlangerEffect">
            <summary>
            DX8 Flanger Effect.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXFlangerEffect.WetDryMix">
            <summary>
            Ratio of wet (processed) signal to dry (unprocessed) signal. Must be in the range from 0 (default) through 100 (all wet).
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXFlangerEffect.Depth">
            <summary>
            Percentage by which the delay time is modulated by the low-frequency oscillator (LFO), in hundredths of a percentage point. Must be in the range from 0 through 100. The default value is 25.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXFlangerEffect.Feedback">
            <summary>
            Percentage of output signal to feed back into the effect's input, in the range from -99 to 99. The default value is 0.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXFlangerEffect.Frequency">
            <summary>
            Frequency of the LFO, in the range from 0 to 10. The default value is 0.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXFlangerEffect.Waveform">
            <summary>
            Waveform of the LFO. Default = <see cref="F:ManagedBass.DXWaveform.Sine"/>.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXFlangerEffect.Delay">
            <summary>
            Number of milliseconds the input is delayed before it is played back, in the range from 0 to 4. The default value is 0 ms.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXFlangerEffect.Phase">
            <summary>
            Phase differential between left and right LFOs. Default = <see cref="F:ManagedBass.DXPhase.Zero"/>.
            </summary>
        </member>
        <member name="T:ManagedBass.DirectX8.DXParamEQ">
            <summary>
            DX8 ParamEQ Effect.
            </summary>
        </member>
        <member name="M:ManagedBass.DirectX8.DXParamEQ.#ctor(System.Int32,System.Double)">
            <summary>
            Creates a new instance of <see cref="T:ManagedBass.DirectX8.DXParamEQ"/>.
            </summary>
        </member>
        <member name="M:ManagedBass.DirectX8.DXParamEQ.AddBand(System.Double)">
            <summary>
            Adds a Band.
            </summary>
            <param name="CenterFrequency">The Band's center frequency in hertz, in the range from 80 to 16000. This value cannot exceed one-third of the frequency of the channel. Default = 100 Hz.</param>
            <returns>The Band Index to be used with <see cref="M:ManagedBass.DirectX8.DXParamEQ.UpdateBand(System.Int32,System.Double)"/>.</returns>
        </member>
        <member name="M:ManagedBass.DirectX8.DXParamEQ.UpdateBand(System.Int32,System.Double)">
            <summary>
            Updates a Band.
            </summary>
            <param name="Band">The Index of the Band to Update (as returned by <see cref="M:ManagedBass.DirectX8.DXParamEQ.AddBand(System.Double)"/>).</param>
            <param name="Gain">The new Gain value for the Band (-15 ... 0 ... 15).</param>
        </member>
        <member name="M:ManagedBass.DirectX8.DXParamEQ.Dispose">
            <summary>
            Frees all resources used by this instance.
            </summary>
        </member>
        <member name="T:ManagedBass.DirectX8.DXParamEQEffect">
            <summary>
            DX8 ParamEQ Effect.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXParamEQEffect.Center">
            <summary>
            Center frequency, in hertz, in the range from 80 to 16000. This value cannot exceed one-third of the frequency of the channel. Default 100 Hz.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXParamEQEffect.Bandwidth">
            <summary>
            Bandwidth, in semitones, in the range from 1 to 36. Default 18 semitones.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXParamEQEffect.Gain">
            <summary>
            Gain, in the range from -15 to 15. Default 0 dB.
            </summary>
        </member>
        <member name="T:ManagedBass.DirectX8.DXReverbEffect">
            <summary>
            DX8 Reverb Effect.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXReverbEffect.InGain">
            <summary>
            Input gain of signal, in decibels (dB), in the range from -96 through 0. The default value is 0 dB.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXReverbEffect.ReverbMix">
            <summary>
            Reverb mix, in dB, in the range from -96 through 0. The default value is 0 dB.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXReverbEffect.ReverbTime">
            <summary>
            Reverb time, in milliseconds, in the range from 0.001 through 3000. The default value is 1000.
            </summary>
        </member>
        <member name="P:ManagedBass.DirectX8.DXReverbEffect.HighFreqRTRatio">
            <summary>
            In the range from 0.001 through 0.999. The default value is 0.001.
            </summary>
        </member>
        <member name="T:ManagedBass.DSP">
            <summary>
            Base class for DSPs.
            </summary>
        </member>
        <member name="P:ManagedBass.DSP.Channel">
            <summary>
            Gets the Channel on which the DSP is applied.
            </summary>
        </member>
        <member name="P:ManagedBass.DSP.Priority">
            <summary>
            Gets or Sets the DSP priority.
            </summary>
        </member>
        <member name="P:ManagedBass.DSP.IsAssigned">
            <summary>
            Gets whether the DSP is assigned.
            </summary>
        </member>
        <member name="P:ManagedBass.DSP.Bypass">
            <summary>
            Gets or Sets whether the DSP should be bypassed.
            </summary>
        </member>
        <member name="P:ManagedBass.DSP.Resolution">
            <summary>
            Gets the <see cref="P:ManagedBass.DSP.Resolution"/> of the <see cref="P:ManagedBass.DSP.Channel"/> on which the DSP is applied.
            </summary>
        </member>
        <member name="M:ManagedBass.DSP.ApplyOn(System.Int32,System.Int32)">
            <summary>
            Applies the DSP on a Channel.
            </summary>
            <param name="Channel">Channel to apply the DSP on.</param>
            <param name="Priority">Priority of the DSP in the DSP chain.</param>
        </member>
        <member name="M:ManagedBass.DSP.ApplyOn(ManagedBass.MediaPlayer,System.Int32)">
            <summary>
            Applies the DSP on a <see cref="T:ManagedBass.MediaPlayer"/>.
            </summary>
            <param name="Player"><see cref="T:ManagedBass.MediaPlayer"/> to apply the DSP on.</param>
            <param name="Priority">Priority of the DSP in the DSP chain.</param>
        </member>
        <member name="M:ManagedBass.DSP.Callback(System.IntPtr,System.Int32)">
            <summary>
            DSP Callback.
            </summary>
            <param name="Buffer">Pointer to Buffer allocated by Bass.</param>
            <param name="Length">No of bytes in buffer.</param>
        </member>
        <member name="M:ManagedBass.DSP.Dispose">
            <summary>
            Frees all resources used by this instance.
            </summary>
        </member>
        <member name="T:ManagedBass.GainDSP">
            <summary>
            Gain DSP.
            Currently implemented only for Floating-point streams.
            </summary>
        </member>
        <member name="P:ManagedBass.GainDSP.Gain">
            <summary>
            Gain value (0 ... 1 (no gain) ... 1024). Values outside the range are automatically clipped.
            </summary>
        </member>
        <member name="M:ManagedBass.GainDSP.Callback(System.IntPtr,System.Int32)">
            <summary>
            DSP Callback.
            </summary>
        </member>
        <member name="T:ManagedBass.PanDSP">
            <summary>
            Pan DSP.
            Currently implemented only for Floating-point streams.
            </summary>
        </member>
        <member name="P:ManagedBass.PanDSP.Pan">
            <summary>
            Pan value (-1 (left) ... 0 (centre) ... 1 (right)).
            </summary>
        </member>
        <member name="M:ManagedBass.PanDSP.Callback(System.IntPtr,System.Int32)">
            <summary>
            DSP Callback.
            </summary>
        </member>
        <member name="T:ManagedBass.Effect`1">
            <summary>
            Wraps a Bass Effect such that you don't need to touch the Bass functions to Handle it.
            </summary>
            <typeparam name="T">Type of the <see cref="T:ManagedBass.IEffectParameter"/></typeparam>
        </member>
        <member name="M:ManagedBass.Effect`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:ManagedBass.Effect`1.Parameters">
            <summary>
            Effect's Parameters.
            </summary>
        </member>
        <member name="M:ManagedBass.Effect`1.ApplyOn(System.Int32,System.Int32)">
            <summary>
            Applies the Effect on a <paramref name="Channel"/>.
            </summary>
            <param name="Channel">The Channel to apply the Effect on.</param>
            <param name="Priority">Priority of the Effect in DSP chain.</param>
        </member>
        <member name="M:ManagedBass.Effect`1.ApplyOn(ManagedBass.MediaPlayer,System.Int32)">
            <summary>
            Applies the Effect on a <see cref="T:ManagedBass.MediaPlayer"/>.
            </summary>
            <param name="Player">The <see cref="T:ManagedBass.MediaPlayer"/> to apply the Effect on.</param>
            <param name="Priority">Priority of the Effect in DSP chain.</param>
        </member>
        <member name="P:ManagedBass.Effect`1.Priority">
            <summary>
            Priority of the Effect in DSP chain.
            </summary>
        </member>
        <member name="M:ManagedBass.Effect`1.Dispose">
            <summary>
            Removes the effect from the Channel and frees allocated memory.
            </summary>
        </member>
        <member name="M:ManagedBass.Effect`1.Default">
            <summary>
            Sets the effect parameters to default by initialising a new instance of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:ManagedBass.Effect`1.IsActive">
            <summary>
            Checks whether the effect is currently enabled and active.
            </summary>
        </member>
        <member name="M:ManagedBass.Effect`1.OnPreset">
            <summary>
            Called after applying a Preset to notify that multiple properties have changed.
            </summary>
        </member>
        <member name="T:ManagedBass.INPC">
            <summary>
            Base implementation of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="E:ManagedBass.INPC.PropertyChanged">
            <summary>
            Fired when a property value changes.
            </summary>
        </member>
        <member name="M:ManagedBass.INPC.OnPropertyChanged(System.String)">
            <summary>
            Fires the <see cref="E:ManagedBass.INPC.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="T:ManagedBass.MediaPlayer">
            <summary>
            A Reusable Channel which can Load files like a Player.
            <para><see cref="T:ManagedBass.MediaPlayer"/> is perfect for UIs, as it implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.</para>
            <para>Also, unlike normal, Properties/Effects/DSP set on a <see cref="T:ManagedBass.MediaPlayer"/> persist through subsequent loads.</para>
            </summary>
        </member>
        <member name="M:ManagedBass.MediaPlayer.#ctor">
            <summary>
            Creates a new instance of <see cref="T:ManagedBass.MediaPlayer"/>.
            </summary>
        </member>
        <member name="E:ManagedBass.MediaPlayer.Disposed">
            <summary>
            Fired when this Channel is Disposed.
            </summary>
        </member>
        <member name="E:ManagedBass.MediaPlayer.MediaEnded">
            <summary>
            Fired when the Media Playback Ends
            </summary>
        </member>
        <member name="E:ManagedBass.MediaPlayer.MediaFailed">
            <summary>
            Fired when the Playback fails
            </summary>
        </member>
        <member name="P:ManagedBass.MediaPlayer.Frequency">
            <summary>
            Gets or Sets the Playback Frequency in Hertz.
            Default is 44100 Hz.
            </summary>
        </member>
        <member name="P:ManagedBass.MediaPlayer.Balance">
            <summary>
            Gets or Sets Balance (Panning) (-1 ... 0 ... 1).
            -1 Represents Completely Left.
             1 Represents Completely Right.
            Default is 0.
            </summary>
        </member>
        <member name="P:ManagedBass.MediaPlayer.Device">
            <summary>
            Gets or Sets the Playback Device used.
            </summary>
        </member>
        <member name="P:ManagedBass.MediaPlayer.Volume">
            <summary>
            Gets or Sets the Playback Volume.
            </summary>
        </member>
        <member name="P:ManagedBass.MediaPlayer.Loop">
            <summary>
            Gets or Sets whether the Playback is looped.
            </summary>
        </member>
        <member name="M:ManagedBass.MediaPlayer.OnLoad(System.String)">
            <summary>
            Override this method for custom loading procedure.
            </summary>
            <param name="FileName">Path to the File to Load.</param>
            <returns><see langword="true"/> on Success, <see langword="false"/> on failure</returns>
        </member>
        <member name="P:ManagedBass.MediaPlayer.Title">
            <summary>
            Title of the Loaded Media.
            </summary>
        </member>
        <member name="P:ManagedBass.MediaPlayer.Artist">
            <summary>
            Artist of the Loaded Media.
            </summary>
        </member>
        <member name="P:ManagedBass.MediaPlayer.Album">
            <summary>
            Album of the Loaded Media.
            </summary>
        </member>
        <member name="P:ManagedBass.MediaPlayer.State">
            <summary>
            Gets the Playback State of the Channel.
            </summary>
        </member>
        <member name="M:ManagedBass.MediaPlayer.Play">
            <summary>
            Starts the Channel Playback.
            </summary>
        </member>
        <member name="M:ManagedBass.MediaPlayer.Pause">
            <summary>
            Pauses the Channel Playback.
            </summary>
        </member>
        <member name="M:ManagedBass.MediaPlayer.Stop">
            <summary>
            Stops the Channel Playback.
            </summary>
            <remarks>Difference from <see cref="M:ManagedBass.Bass.ChannelStop(System.Int32)"/>: Playback is restarted when <see cref="M:ManagedBass.MediaPlayer.Play"/> is called.</remarks>
        </member>
        <member name="P:ManagedBass.MediaPlayer.Duration">
            <summary>
            Gets the Playback Duration.
            </summary>
        </member>
        <member name="P:ManagedBass.MediaPlayer.Position">
            <summary>
            Gets or Sets the Playback Position.
            </summary>
        </member>
        <member name="M:ManagedBass.MediaPlayer.Load(System.String)">
            <summary>
            Loads a file into the player.
            </summary>
            <param name="FileName">Path to the file to Load.</param>
            <returns><see langword="true"/> on succes, <see langword="false"/> on failure.</returns>
        </member>
        <member name="E:ManagedBass.MediaPlayer.MediaLoaded">
            <summary>
            Fired when a Media is Loaded.
            </summary>
        </member>
        <member name="M:ManagedBass.MediaPlayer.Dispose">
            <summary>
            Frees all resources used by the player.
            </summary>
        </member>
        <member name="M:ManagedBass.MediaPlayer.InitProperties">
            <summary>
            Initializes Properties on every call to <see cref="M:ManagedBass.MediaPlayer.Load(System.String)"/>.
            </summary>
        </member>
        <member name="E:ManagedBass.MediaPlayer.PropertyChanged">
            <summary>
            Fired when a property value changes.
            </summary>
        </member>
        <member name="M:ManagedBass.MediaPlayer.OnPropertyChanged(System.String)">
            <summary>
            Fires the <see cref="E:ManagedBass.MediaPlayer.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="T:ManagedBass.PlaybackDevice">
            <summary>
            Bass Playback Device.
            </summary>
        </member>
        <member name="M:ManagedBass.PlaybackDevice.GetByIndex(System.Int32)">
            <summary>
            Get Device by Index.
            </summary>
        </member>
        <member name="P:ManagedBass.PlaybackDevice.Index">
            <summary>
            Gets the Index of the Playback Device.
            </summary>
        </member>
        <member name="P:ManagedBass.PlaybackDevice.Count">
            <summary>
            Number of available Playback Devices.
            </summary>
        </member>
        <member name="P:ManagedBass.PlaybackDevice.NoSound">
            <summary>
            No Sound Device.
            </summary>
        </member>
        <member name="P:ManagedBass.PlaybackDevice.Default">
            <summary>
            Default Audio Playback Device.
            </summary>
        </member>
        <member name="P:ManagedBass.PlaybackDevice.Current">
            <summary>
            Gets or Sets the Device used on the Current thread.
            </summary>
        </member>
        <member name="P:ManagedBass.PlaybackDevice.CurrentInfo">
            <summary>
            Gets the current initialized device's info.
            </summary>
        </member>
        <member name="P:ManagedBass.PlaybackDevice.Devices">
            <summary>
            Enumerates available Playback Devices.
            </summary>
        </member>
        <member name="P:ManagedBass.PlaybackDevice.Info">
            <summary>
            Gets a DeviceInfo object containing information on the Device like Name, Type, IsEnabled, etc.
            </summary>
        </member>
        <member name="M:ManagedBass.PlaybackDevice.Init(System.Int32,ManagedBass.DeviceInitFlags)">
            <summary>
            Initialize a Device for Playback
            </summary>
        </member>
        <member name="M:ManagedBass.PlaybackDevice.Start">
            <summary>
            Start Output.
            </summary>
        </member>
        <member name="M:ManagedBass.PlaybackDevice.Pause">
            <summary>
            Pause Output.
            </summary>
        </member>
        <member name="M:ManagedBass.PlaybackDevice.Stop">
            <summary>
            Stop Output.
            </summary>
        </member>
        <member name="M:ManagedBass.PlaybackDevice.Dispose">
            <summary>
            Frees an initialized Device
            </summary>
        </member>
        <member name="P:ManagedBass.PlaybackDevice.Volume">
            <summary>
            Gets or Sets the Device Volume
            </summary>
        </member>
        <member name="M:ManagedBass.PlaybackDevice.ToString">
            <summary>
            Returns the Name of the Device
            </summary>
        </member>
        <member name="T:ManagedBass.Silence">
            <summary>
            Plays Silence on the specified Device. Useful for WasapiLoopbackCapture.
            </summary>
        </member>
        <member name="M:ManagedBass.Silence.#ctor(ManagedBass.PlaybackDevice)">
            <summary>
            Creates a new instance of <see cref="T:ManagedBass.Silence"/>.
            </summary>
            <param name="Device">The <see cref="T:ManagedBass.PlaybackDevice"/> to use.</param>
        </member>
        <member name="M:ManagedBass.Silence.Play">
            <summary>
            Play Silence.
            </summary>
            <returns>true on success, else false.</returns>
        </member>
        <member name="M:ManagedBass.Silence.Stop">
            <summary>
            Stop playing Silence.
            </summary>
            <returns>true on success, else false.</returns>
        </member>
        <member name="M:ManagedBass.Silence.Dispose">
            <summary>
            Dispose all resources used by this instance.
            </summary>
        </member>
        <member name="T:ManagedBass.StremFileProcedures">
            <summary>
            <see cref="T:ManagedBass.FileProcedures"/> for use with .Net <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:ManagedBass.StremFileProcedures.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of <see cref="T:ManagedBass.StremFileProcedures"/>.
            </summary>
            <param name="InputStream">The <see cref="T:System.IO.Stream"/> to wrap.</param>
        </member>
        <member name="T:ManagedBass.DataAvailableEventArgs">
            <summary>
            Provides access to recorded data.
            </summary>
        </member>
        <member name="P:ManagedBass.DataAvailableEventArgs.Buffer">
            <summary>
            The Data buffer.
            </summary>
        </member>
        <member name="P:ManagedBass.DataAvailableEventArgs.Length">
            <summary>
            No of bytes in the <see cref="P:ManagedBass.DataAvailableEventArgs.Buffer"/>.
            </summary>
        </member>
        <member name="M:ManagedBass.DataAvailableEventArgs.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:ManagedBass.DataAvailableEventArgs"/>.
            </summary>
            <param name="Buffer">The Data Buffer.</param>
            <param name="Length">No of bytes in the <paramref name="Buffer"/></param>
        </member>
        <member name="T:ManagedBass.IAudioRecorder">
            <summary>
            Implemented by an Audio Recorder.
            </summary>
        </member>
        <member name="M:ManagedBass.IAudioRecorder.Start">
            <summary>
            Start Recording.
            </summary>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:ManagedBass.IAudioRecorder.Stop">
            <summary>
            Stop Recording.
            </summary>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="P:ManagedBass.IAudioRecorder.IsRecording">
            <summary>
            Gets if Recording is in Progress.
            </summary>
        </member>
        <member name="E:ManagedBass.IAudioRecorder.DataAvailable">
            <summary>
            Provides the recorded data.
            </summary>
        </member>
        <member name="P:ManagedBass.IAudioRecorder.AudioFormat">
            <summary>
            Gets the <see cref="T:ManagedBass.WaveFormat"/> of the Recorded Audio.
            </summary>
        </member>
        <member name="T:ManagedBass.Record">
            <summary>
            Capture audio from Microphone.
            </summary>
        </member>
        <member name="M:ManagedBass.Record.#ctor">
            <summary>
            Creates a new instance of <see cref="T:ManagedBass.Record"/> with the Default Format and Device.
            </summary>
        </member>
        <member name="M:ManagedBass.Record.#ctor(ManagedBass.RecordDevice)">
            <summary>
            Creates a new instance of <see cref="T:ManagedBass.Record"/> with the Default Format.
            </summary>
            <param name="Device">The <see cref="T:ManagedBass.RecordDevice"/> to use.</param>
        </member>
        <member name="M:ManagedBass.Record.#ctor(ManagedBass.RecordDevice,System.Int32,System.Int32,ManagedBass.Resolution)">
            <summary>
            Creates a new instance of <see cref="T:ManagedBass.Record"/>.
            </summary>
        </member>
        <member name="P:ManagedBass.Record.IsRecording">
            <summary>
            Gets if Capturing is in progress.
            </summary>
        </member>
        <member name="M:ManagedBass.Record.Start">
            <summary>
            Start Audio Capture.
            </summary>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:ManagedBass.Record.Stop">
            <summary>
            Stop Audio Capture.
            </summary>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="P:ManagedBass.Record.AudioFormat">
            <summary>
            Gets the <see cref="T:ManagedBass.WaveFormat"/> of the Recorded Audio.
            </summary>
        </member>
        <member name="M:ManagedBass.Record.Dispose">
            <summary>
            Frees all resources used by this instance.
            </summary>
        </member>
        <member name="E:ManagedBass.Record.DataAvailable">
            <summary>
            Provides the captured data.
            </summary>
        </member>
        <member name="T:ManagedBass.RecordDevice">
            <summary>
            Bass Recording Device.
            </summary>
        </member>
        <member name="M:ManagedBass.RecordDevice.GetByIndex(System.Int32)">
            <summary>
            Get Device by Index.
            </summary>
        </member>
        <member name="P:ManagedBass.RecordDevice.Devices">
            <summary>
            Enumerates available Recording Devices
            </summary>
        </member>
        <member name="P:ManagedBass.RecordDevice.Index">
            <summary>
            Gets the Recording Device Index.
            </summary>
        </member>
        <member name="P:ManagedBass.RecordDevice.Count">
            <summary>
            Number of available Recording Devices
            </summary>
        </member>
        <member name="P:ManagedBass.RecordDevice.Info">
            <summary>
            Gets a DeviceInfo object containing information on the Device like Name, Type, IsEnabled, etc.
            </summary>
        </member>
        <member name="M:ManagedBass.RecordDevice.Init">
            <summary>
            Initialize a Device for Recording
            </summary>
        </member>
        <member name="M:ManagedBass.RecordDevice.Dispose">
            <summary>
            Frees an initialized Device
            </summary>
        </member>
        <member name="P:ManagedBass.RecordDevice.Default">
            <summary>
            Default Audio Recording Devices
            </summary>
        </member>
        <member name="P:ManagedBass.RecordDevice.Current">
            <summary>
            Gets or Sets the Recording Device used with the Current thread.
            </summary>
        </member>
        <member name="P:ManagedBass.RecordDevice.CurrentInfo">
            <summary>
            Gets the current initialized device's info.
            </summary>
        </member>
        <member name="M:ManagedBass.RecordDevice.ToString">
            <summary>
            Returns the Name of the Device
            </summary>
        </member>
        <member name="T:ManagedBass.Tags.ID3v2Tag">
            <summary>
            Reads ID3v2 Tags.
            </summary>
        </member>
        <member name="M:ManagedBass.Tags.ID3v2Tag.#ctor(System.IntPtr)">
            <summary>
            Reads tags from an <see cref="T:System.IntPtr"/> to an ID3v2 block.
            </summary>
        </member>
        <member name="M:ManagedBass.Tags.ID3v2Tag.#ctor(System.Int32)">
            <summary>
            Reads tags from a Channel.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.ID3v2Tag.TextFrames">
            <summary>
            Dictionary of Text frames.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.ID3v2Tag.PictureFrames">
            <summary>
            List of Picture tags.
            </summary>
        </member>
        <member name="T:ManagedBass.Tags.PictureTag">
            <summary>
            Picture Tag.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTag.MimeType">
            <summary>
            Picture Mime Type.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTag.PictureType">
            <summary>
            Picture Type.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTag.Data">
            <summary>
            Picture Data.
            </summary>
        </member>
        <member name="T:ManagedBass.Tags.PictureTypes">
            <summary>
            Picture Types.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.Other">
            <summary>
            Other.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.FileIcon">
            <summary>
            File Icon.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.OtherFileIcon">
            <summary>
            Other File Icon.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.FrontCover">
            <summary>
            Front Cover.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.BackCover">
            <summary>
            Back Cover.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.LeafletPage">
            <summary>
            Leaflet Page.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.Media">
            <summary>
            Media.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.Soloist">
            <summary>
            Soloist.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.Artist">
            <summary>
            Artist.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.Conductor">
            <summary>
            Conductor.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.Band">
            <summary>
            Band.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.Composer">
            <summary>
            Composer.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.Lyricist">
            <summary>
            Lyricist.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.RecordingLocation">
            <summary>
            Recording Location.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.DuringRecording">
            <summary>
            During Recording.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.DuringPerformance">
            <summary>
            During Performance.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.Movie">
            <summary>
            Movie.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.ABrightColouredFish">
            <summary>
            A Bright Coloured Fish.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.Illustration">
            <summary>
            Illustration.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.BandLogo">
            <summary>
            Band Logo.
            </summary>
        </member>
        <member name="F:ManagedBass.Tags.PictureTypes.PublisherLogo">
            <summary>
            Publisher Logo.
            </summary>
        </member>
        <member name="T:ManagedBass.Tags.TagProperties`1">
            <summary>
            Generic class for holding tags.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Title">
            <summary>
            Gets the Title.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Artist">
            <summary>
            Gets the Artist.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Album">
            <summary>
            Gets the Album.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.AlbumArtist">
            <summary>
            Gets the Album Artist.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Subtitle">
            <summary>
            Gets the Subtitle.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.BPM">
            <summary>
            Gets the Beats per Minute (BPM).
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Composer">
            <summary>
            Gets the Composer.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Copyright">
            <summary>
            Gets the Copyright.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Genre">
            <summary>
            Gets the Genre.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Grouping">
            <summary>
            Gets the Grouping.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Publisher">
            <summary>
            Gets the Publisher.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Encoder">
            <summary>
            Gets the Encoder.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Lyricist">
            <summary>
            Gets the Lyricist.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Year">
            <summary>
            Gets the Year.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Conductor">
            <summary>
            Gets the Conductor.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Track">
            <summary>
            Gets the Track Number.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Producer">
            <summary>
            Gets the Producer.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Comment">
            <summary>
            Gets the Comment.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Mood">
            <summary>
            Gets the Mood.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Rating">
            <summary>
            Gets the Rating.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.ISRC">
            <summary>
            Gets the ISRC.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagProperties`1.Remixer">
            <summary>
            Gets the Remixer.
            </summary>
        </member>
        <member name="T:ManagedBass.Tags.TagReader">
            <summary>
            Reads tags from a File or a Channel depending on the <see cref="T:ManagedBass.ChannelType"/>.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagReader.Other">
            <summary>
            Provides tags that didn't fit into any Properties.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagReader.Pictures">
            <summary>
            Provides the Pictures read from File/Channel.
            </summary>
        </member>
        <member name="P:ManagedBass.Tags.TagReader.Lyrics">
            <summary>
            Gets the Lyrics.
            </summary>
        </member>
        <member name="M:ManagedBass.Tags.TagReader.Read(System.String)">
            <summary>
            Reads tags from a File.
            </summary>
        </member>
        <member name="M:ManagedBass.Tags.TagReader.Read(System.Int32)">
            <summary>
            Reads tags from a <paramref name="Channel"/>.
            </summary>
        </member>
        <member name="M:ManagedBass.Tags.TagReader.ReadApe(System.Int32)">
            <summary>
            Reads <see cref="F:ManagedBass.TagType.APE"/> tags from a <paramref name="Channel"/>.
            </summary>
        </member>
        <member name="M:ManagedBass.Tags.TagReader.ReadOgg(System.Int32)">
            <summary>
            Reads <see cref="F:ManagedBass.TagType.OGG"/> tags from a <paramref name="Channel"/>.
            </summary>
        </member>
        <member name="M:ManagedBass.Tags.TagReader.ReadRiffInfo(System.Int32)">
            <summary>
            Reads <see cref="F:ManagedBass.TagType.RiffInfo"/> tags from a <paramref name="Channel"/>.
            </summary>
        </member>
        <member name="M:ManagedBass.Tags.TagReader.ReadMp4(System.Int32)">
            <summary>
            Reads <see cref="F:ManagedBass.TagType.MP4"/> tags from a <paramref name="Channel"/>.
            </summary>
        </member>
        <member name="M:ManagedBass.Tags.TagReader.ReadID3v1(System.Int32)">
            <summary>
            Reads <see cref="F:ManagedBass.TagType.ID3"/> tags from a <paramref name="Channel"/>.
            </summary>
        </member>
        <member name="M:ManagedBass.Tags.TagReader.ReadID3v2(System.Int32)">
            <summary>
            Reads <see cref="F:ManagedBass.TagType.ID3v2"/> tags from a <paramref name="Channel"/>.
            </summary>
        </member>
        <member name="M:ManagedBass.Tags.TagReader.ReadBWF(System.Int32)">
            <summary>
            Reads <see cref="F:ManagedBass.TagType.RiffBext"/> tags from a <paramref name="Channel"/>.
            </summary>
        </member>
        <member name="T:ManagedBass.IAudioWriter">
            <summary>
            Writes audio to a file.
            </summary>
        </member>
        <member name="M:ManagedBass.IAudioWriter.Write(System.Byte[],System.Int32)">
            <summary>
            Write data from a byte[].
            </summary>
            <param name="Data">byte[] to write from.</param>
            <param name="Length">No of bytes to write.</param>
        </member>
        <member name="M:ManagedBass.IAudioWriter.Write(System.Int16[],System.Int32)">
            <summary>
            Write data from a short[].
            </summary>
            <param name="Data">short[] to write from.</param>
            <param name="Length">No of bytes to write, i.e. (No of Shorts) * 2.</param>
        </member>
        <member name="M:ManagedBass.IAudioWriter.Write(System.Single[],System.Int32)">
            <summary>
            Write data from a float[].
            </summary>
            <param name="Data">float[] to write from.</param>
            <param name="Length">No of bytes to write, i.e. (No of floats) * 4.</param>
        </member>
        <member name="T:ManagedBass.WaveFileWriter">
            <summary>
            Writes Wave data to a .wav file
            </summary>
        </member>
        <member name="P:ManagedBass.WaveFileWriter.Length">
            <summary>
            Number of bytes of audio
            </summary>
        </member>
        <member name="M:ManagedBass.WaveFileWriter.#ctor(System.IO.Stream,ManagedBass.WaveFormat)">
            <summary>
            Creates a <see cref="T:ManagedBass.WaveFileWriter"/> that writes to a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:ManagedBass.WaveFileWriter.Write(System.Byte[],System.Int32)">
            <summary>
            Writes bytes to the WaveFile
            </summary>
            <param name="Data">the Buffer containing the wave data</param>
            <param name="Length">the number of bytes to write</param>
        </member>
        <member name="M:ManagedBass.WaveFileWriter.Write(System.Int16[],System.Int32)">
            <summary>
            Writes 16 bit samples to the Wave file
            </summary>
            <param name="Data">The Buffer containing the wave data</param>
            <param name="Length">The number of bytes to write</param>
        </member>
        <member name="M:ManagedBass.WaveFileWriter.Write(System.Single[],System.Int32)">
            <summary>
            Writes 32 bit float samples to the Wave file
            </summary>
            <param name="Data">The Buffer containing the wave data</param>
            <param name="Length">The number of bytes to write</param>
        </member>
        <member name="M:ManagedBass.WaveFileWriter.Dispose">
            <summary>
            Closes this WaveFile
            </summary>
        </member>
        <member name="M:ManagedBass.WaveFileWriter.Dispose(System.Boolean)">
            <summary>
            Actually performs the close,making sure the header contains the correct data
            </summary>
            <param name="Disposing">True if called from <see>Dispose</see></param>
        </member>
        <member name="M:ManagedBass.WaveFileWriter.Finalize">
            <summary>
            Finaliser - should only be called if the User forgot to close this WaveFileWriter
            </summary>
        </member>
        <member name="T:ManagedBass.WaveFormat">
            <summary>
            Represents a Wave file format.
            </summary>
        </member>
        <member name="M:ManagedBass.WaveFormat.#ctor">
            <summary>
            Creates a new PCM 44.1Khz stereo 16 bit format
            </summary>
        </member>
        <member name="M:ManagedBass.WaveFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new 16 bit wave format with the specified sample rate and channel count
            </summary>
            <param name="SampleRate">Sample Rate</param>
            <param name="Channels">Number of channels</param>
        </member>
        <member name="M:ManagedBass.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new PCM format with the specified sample rate, bit depth and channels
            </summary>
        </member>
        <member name="M:ManagedBass.WaveFormat.CreateIeeeFloat(System.Int32,System.Int32)">
            <summary>
            Creates a new 32 bit IEEE floating point wave format
            </summary>
            <param name="SampleRate">sample rate</param>
            <param name="Channels">number of channels</param>
        </member>
        <member name="M:ManagedBass.WaveFormat.FromChannel(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:ManagedBass.WaveFormat"/> from a <paramref name="Channel"/>.
            </summary>
        </member>
        <member name="P:ManagedBass.WaveFormat.Encoding">
            <summary>
            Gets or Sets the encoding Type used
            </summary>
        </member>
        <member name="M:ManagedBass.WaveFormat.Serialize(System.IO.BinaryWriter)">
            <summary>
            Writes this WaveFormat object to a stream
            </summary>
            <param name="Writer">the output stream</param>
        </member>
        <member name="P:ManagedBass.WaveFormat.Channels">
            <summary>
            Gets or Sets the number of channels (1=mono,2=stereo etc)
            </summary>
        </member>
        <member name="P:ManagedBass.WaveFormat.SampleRate">
            <summary>
            Gets or Sets the sample rate (samples per second)
            </summary>
        </member>
        <member name="P:ManagedBass.WaveFormat.AverageBytesPerSecond">
            <summary>
            Gets or Sets the average number of bytes used per second
            </summary>
        </member>
        <member name="P:ManagedBass.WaveFormat.BlockAlign">
            <summary>
            Gets or Sets the block alignment
            </summary>
        </member>
        <member name="P:ManagedBass.WaveFormat.BitsPerSample">
            <summary>
            Gets or Sets the number of bits per sample (usually 16 or 32, sometimes 24 or 8)
            Can be 0 for some codecs
            </summary>
        </member>
        <member name="P:ManagedBass.WaveFormat.ExtraSize">
            <summary>
            Gets or Sets the number of extra bytes used by this waveformat.
            Often 0, except for compressed formats which store extra data after the WAVEFORMATEX header
            </summary>
        </member>
    </members>
</doc>
